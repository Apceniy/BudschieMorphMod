buildscript {
    repositories {
        maven {
            url = 'https://maven.minecraftforge.net'
        }
        
        maven { url = 'https://maven.parchmentmc.org' }
        
         // maven { url = "https://repo.spongepowered.org/maven" }

        mavenCentral()
    }

    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath 'org.spongepowered:mixingradle:0.7.+'
        classpath 'org.parchmentmc:librarian:1.+'
    }
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.spongepowered.mixin'
apply plugin: 'org.parchmentmc.librarian.forgegradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

// apply from: 'https://raw.githubusercontent.com/SizableShrimp/Forge-Class-Remapper/main/classremapper.gradle'

version = '1.18.2-2.0.2'
group = 'de.budschie.bmorph' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'bmorph'

java.toolchain.languageVersion = JavaLanguageVersion.of(17) // Mojang ships Java 16 to end users, so your mod should target Java 8.

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
    // The mappings can be changed at any time, and must be in the following format.
    // Channel:   Version:
    // snapshot   YYYYMMDD   Snapshot are built nightly.
    // stable     #          Stables are built at the discretion of the MCP team.
    // official   MCVersion  Official field/method names from Mojang mapping files
    //
    // You must be aware of the Mojang license when using the 'official' mappings.
    // See more information here: https://github.com/MinecraftForge/MCPConfig/blob/master/Mojang.md
    //
    // Use non-default mappings at your own risk. they may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
	mappings channel: 'parchment', version: '2022.03.13-1.18.2'
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be changed as needed.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"
            
            property 'forge.enabledGameTestNamespaces', 'bmorph'

            mods {
                bmorph {
                    source sourceSets.main
                    source sourceSets.test
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be changed as needed.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"
            
            property 'forge.enabledGameTestNamespaces', 'bmorph'

            mods {
                bmorph {
                    source sourceSets.main
                }
            }
        }
        
        // This run config launches GameTestServer and runs all registered gametests, then exits.
        // By default, the server will crash when no gametests are provided.
        // The gametest system is also enabled by default for other run configs under the /test command.
        gameTestServer {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            property 'forge.enabledGameTestNamespaces', 'bmorph'

            mods {
                bmorph {
                    source sourceSets.main
                    source sourceSets.test
                }
            }
        }
        

        data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be changed as needed.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'bmorph', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                bmorph {
                    source sourceSets.main
                }
            }
        }
    }
}

mixin {
    add sourceSets.main, "bmorph.refmap.json"
    config 'bmorph.mixins.json'
}

// Include resources generated by data generators.
sourceSets.main.resources { 
	srcDir 'src/generated/resources'
}

repositories {
        maven {
        url "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
}

processResources {
	exclude '**.psd'
	exclude '**.kra'
	exclude '**/*.psd'
	exclude '**/*.kra'
}

dependencies {
    // Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft 'net.minecraftforge:forge:1.18.2-40.2.14'

    // implementation fg.deobf("curse.maven:shrink-426386:3458658")
    // implementation fg.deobf("curse.maven:quark-243121:3394265")
    // implementation fg.deobf("curse.maven:autoreglib-250363:3326041")
    // implementation fg.deobf("curse.maven:iceandfire-264231:3361256")
    // implementation fg.deobf("curse.maven:citadel-331936:3390028")
    // implementation fg.deobf("curse.maven:betteranimalsplus-054919:3286395")
    // implementation fg.deobf("curse.maven:rats-323596:3319810")
    
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'

	implementation fg.deobf("curse.maven:shrink-426386:3696155")
	implementation fg.deobf("curse.maven:betteranimalsplus-303557:3680864")
	// implementation fg.deobf("curse.maven:firstpersonmodel-333287:3556530")
	
	// Deps of betteranimalsplus mod
	implementation fg.deobf("curse.maven:architectury-419699:3728618")
	implementation fg.deobf("curse.maven:curios-309927:3670447")
	
	implementation fg.deobf("curse.maven:artifacts-312353:3736897")
	implementation fg.deobf("curse.maven:expandability-465066:3678612")
	
	implementation fg.deobf("curse.maven:epic-fight-mod-405076:4922082")
	
        
    // You may put jars on which you depend on in ./libs or you may define them like so..
    // compile "some.group:artifact:version:classifier"
    // compile "some.group:artifact:version"

    // Real examples
    // compile 'com.mod-buildcraft:buildcraft:6.0.8:dev'  // adds buildcraft to the dev env
    // compile 'com.googlecode.efficient-java-matrix-library:ejml:0.24' // adds ejml to the dev env

    // The 'provided' configuration is for optional dependencies that exist at compile-time but might not at runtime.
    // provided 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // These dependencies get remapped to your current MCP mappings
    // deobf 'com.mod-buildcraft:buildcraft:6.0.8:dev'

// For more info...
// http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
// http://www.gradle.org/docs/current/userguide/dependency_management.html
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
            'Specification-Title': 'bmorph',
            'Specification-Vendor': 'bmorphsareus',
            'Specification-Version': '1', // We are version 1 of ourselves
            'Implementation-Title': project.name,
            'Implementation-Version': "${version}",
            'Implementation-Vendor' :'bmorphsareus',
            'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
            'TweakClass': 'org.spongepowered.asm.launch.MixinTweak',
            'TweakOrder': 0,
            'MixinConfigs': 'bmorph.mixins.json'
        ])
    }
    
    rename 'mixin.refmap.json', 'bmorph.refmap.json'
}

// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}
